fn get_permutation(n: i32, k: i32) -> String {
    let mut numbers: Vec<i32> = (1..=n).collect(); // [1,2,...,n]
    let mut k = k - 1; // 調整為0-indexed
    let mut factorial = vec![1; n as usize];

    // 預先計算階乘
    for i in 1..n as usize {
        factorial[i] = factorial[i - 1] * i as i32;
    }

    let mut result = String::new();

    for i in (0..n as usize).rev() {
        let idx = (k / factorial[i]) as usize;
        k %= factorial[i];
        result.push_str(&numbers[idx].to_string());
        numbers.remove(idx);
    }

    result
}

fn main() {
    println!("{}", get_permutation(3, 3)); // 輸出: "213"
    println!("{}", get_permutation(4, 9)); // 輸出: "2314"
    println!("{}", get_permutation(3, 1)); // 輸出: "123"
}
